/**
 * FlowAccount Open API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://openapi.flowaccount.com/v1';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class AuthenResponse {
    'accessToken'?: string;
    'expiresIn'?: number;
    'tokenType'?: string;
    'refreshToken'?: string;
    'error'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "accessToken",
            "baseName": "access_token",
            "type": "string"
        },
        {
            "name": "expiresIn",
            "baseName": "expires_in",
            "type": "number"
        },
        {
            "name": "tokenType",
            "baseName": "token_type",
            "type": "string"
        },
        {
            "name": "refreshToken",
            "baseName": "refresh_token",
            "type": "string"
        },
        {
            "name": "error",
            "baseName": "error",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return AuthenResponse.attributeTypeMap;
    }
}

export class BusinessCategory {
    /**
    * id of category
    */
    'id'?: number;
    /**
    * system code
    */
    'systemCode'?: number;
    /**
    * id of business category
    */
    'categoryId'?: number;
    /**
    * name local of category
    */
    'categoryNameLocal'?: string;
    /**
    * name foreign of category
    */
    'categoryNameForeign'?: string;
    /**
    * id of debit
    */
    'debitId'?: number;
    /**
    * id of debit category
    */
    'debitCategory'?: number;
    /**
    * code of debit category
    */
    'debitCode'?: string;
    /**
    * name local of debit
    */
    'debitNameLocal'?: string;
    /**
    * name foreign of debit
    */
    'debitNameForeign'?: string;
    /**
    * id of credit
    */
    'creditId'?: number;
    /**
    * id of credit category
    */
    'creditCategory'?: number;
    /**
    * code of credit category
    */
    'creditCode'?: string;
    /**
    * name local of credit
    */
    'creditNameLocal'?: string;
    /**
    * name foreign of credit
    */
    'creditNameForeign'?: string;
    /**
    * keyword
    */
    'keywords'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "systemCode",
            "baseName": "systemCode",
            "type": "number"
        },
        {
            "name": "categoryId",
            "baseName": "categoryId",
            "type": "number"
        },
        {
            "name": "categoryNameLocal",
            "baseName": "categoryNameLocal",
            "type": "string"
        },
        {
            "name": "categoryNameForeign",
            "baseName": "categoryNameForeign",
            "type": "string"
        },
        {
            "name": "debitId",
            "baseName": "debitId",
            "type": "number"
        },
        {
            "name": "debitCategory",
            "baseName": "debitCategory",
            "type": "number"
        },
        {
            "name": "debitCode",
            "baseName": "debitCode",
            "type": "string"
        },
        {
            "name": "debitNameLocal",
            "baseName": "debitNameLocal",
            "type": "string"
        },
        {
            "name": "debitNameForeign",
            "baseName": "debitNameForeign",
            "type": "string"
        },
        {
            "name": "creditId",
            "baseName": "creditId",
            "type": "number"
        },
        {
            "name": "creditCategory",
            "baseName": "creditCategory",
            "type": "number"
        },
        {
            "name": "creditCode",
            "baseName": "creditCode",
            "type": "string"
        },
        {
            "name": "creditNameLocal",
            "baseName": "creditNameLocal",
            "type": "string"
        },
        {
            "name": "creditNameForeign",
            "baseName": "creditNameForeign",
            "type": "string"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return BusinessCategory.attributeTypeMap;
    }
}

export class Empty {

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
    ];

    static getAttributeTypeMap() {
        return Empty.attributeTypeMap;
    }
}

export class ExpenseDocumentWithoutPayment {
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * ราคาสินค้ารวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVatInclusive'?: boolean;
    'items'?: Array<ExpenseSimpleProductItem>;
    /**
    * ยอดขายรวม
    */
    'subTotal': number;
    /**
    * ส่วนลด (%)
    */
    'discountPercentage'?: number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลด
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายหลังหักส่วนลดรวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVat'?: boolean;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * ยอดขายหลังหักส่วนลดหักภาษี ณ ที่จ่ายหรือไม่่
    */
    'isWithholdingTax'?: boolean;
    /**
    * ภาษี ณ ที่จ่าย (%)
    */
    'withholdingTaxAmount'?: number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<ExpenseSimpleProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountPercentage",
            "baseName": "discountPercentage",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "isVat",
            "baseName": "isVat",
            "type": "boolean"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "isWithholdingTax",
            "baseName": "isWithholdingTax",
            "type": "boolean"
        },
        {
            "name": "withholdingTaxAmount",
            "baseName": "withholdingTaxAmount",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseDocumentWithoutPayment.attributeTypeMap;
    }
}

export class ExpenseDocumentWithoutPaymentResponse {
    /**
    * action success
    */
    'status'?: boolean;
    /**
    * error message
    */
    'message'?: string;
    /**
    * error code
    */
    'code'?: number;
    'data'?: ExpenseDocumentWithoutPaymentWithId;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "boolean"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "ExpenseDocumentWithoutPaymentWithId"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseDocumentWithoutPaymentResponse.attributeTypeMap;
    }
}

export class ExpenseDocumentWithoutPaymentWithId {
    /**
    * เลขที่เอกสาร
    */
    'documentSerial'?: string;
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * ราคาสินค้ารวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVatInclusive'?: boolean;
    'items'?: Array<ExpenseSimpleProductItem>;
    /**
    * ยอดขายรวม
    */
    'subTotal': number;
    /**
    * ส่วนลด (%)
    */
    'discountPercentage'?: number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลด
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายหลังหักส่วนลดรวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVat'?: boolean;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * ยอดขายหลังหักส่วนลดหักภาษี ณ ที่จ่ายหรือไม่่
    */
    'isWithholdingTax'?: boolean;
    /**
    * ภาษี ณ ที่จ่าย (%)
    */
    'withholdingTaxAmount'?: number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "documentSerial",
            "baseName": "documentSerial",
            "type": "string"
        },
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<ExpenseSimpleProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountPercentage",
            "baseName": "discountPercentage",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "isVat",
            "baseName": "isVat",
            "type": "boolean"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "isWithholdingTax",
            "baseName": "isWithholdingTax",
            "type": "boolean"
        },
        {
            "name": "withholdingTaxAmount",
            "baseName": "withholdingTaxAmount",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseDocumentWithoutPaymentWithId.attributeTypeMap;
    }
}

export class ExpenseInlineDocument {
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ผู้ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    */
    'isVatInclusive'?: boolean;
    /**
    * รูปแบบส่วนลดสินค้าแต่ละรายการ: 1 = รูปแบบเปอร์เซ็นต์ (%) / 3 = รูปแบบจำนวนเงิน (฿)
    */
    'discountType'?: number;
    'items'?: Array<ExpenseInlineProductItem>;
    /**
    * รวมยอดขาย
    */
    'subTotal': number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลดรวม
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
    */
    'exemptAmount'?: number;
    /**
    * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
    */
    'vatableAmount'?: number;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "discountType",
            "baseName": "discountType",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<ExpenseInlineProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "exemptAmount",
            "baseName": "exemptAmount",
            "type": "number"
        },
        {
            "name": "vatableAmount",
            "baseName": "vatableAmount",
            "type": "number"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseInlineDocument.attributeTypeMap;
    }
}

export class ExpenseInlineDocumentWithId {
    /**
    * เลขที่เอกสาร
    */
    'documentSerial'?: string;
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ผู้ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    */
    'isVatInclusive'?: boolean;
    /**
    * รูปแบบส่วนลดสินค้าแต่ละรายการ: 1 = รูปแบบเปอร์เซ็นต์ (%) / 3 = รูปแบบจำนวนเงิน (฿)
    */
    'discountType'?: number;
    'items'?: Array<ExpenseInlineProductItem>;
    /**
    * รวมยอดขาย
    */
    'subTotal': number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลดรวม
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
    */
    'exemptAmount'?: number;
    /**
    * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
    */
    'vatableAmount'?: number;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "documentSerial",
            "baseName": "documentSerial",
            "type": "string"
        },
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "discountType",
            "baseName": "discountType",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<ExpenseInlineProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "exemptAmount",
            "baseName": "exemptAmount",
            "type": "number"
        },
        {
            "name": "vatableAmount",
            "baseName": "vatableAmount",
            "type": "number"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseInlineDocumentWithId.attributeTypeMap;
    }
}

export class ExpenseInlineProductItem {
    /**
    * รายละเอียด
    */
    'description'?: string;
    /**
    * system code
    */
    'systemCode'?: number;
    /**
    * id of expense category
    */
    'categoryId'?: number;
    /**
    * name foreign of expense category
    */
    'nameForeign'?: string;
    /**
    * name local of expense category
    */
    'nameLocal'?: string;
    /**
    * credit category
    */
    'creditCategory'?: number;
    /**
    * id of expense credit
    */
    'creditId'?: number;
    /**
    * code of expense credit category
    */
    'creditCode'?: string;
    /**
    * name foreign of expense credit category
    */
    'creditNameForeign'?: string;
    /**
    * name local of expense credit category
    */
    'creditNameLocal'?: string;
    /**
    * debit category
    */
    'debitCategory'?: number;
    /**
    * id of expense debit
    */
    'debitId'?: number;
    /**
    * code of expense debit category
    */
    'debitCode'?: string;
    /**
    * name foreign of expense debit category
    */
    'debitNameForeign'?: string;
    /**
    * name local of expense debit category
    */
    'debitNameLocal'?: string;
    /**
    * จำนวนรายการ
    */
    'quantity': number;
    /**
    * หน่วยรายการ
    */
    'unitName'?: string;
    /**
    * มูลค่าค่าใช้จ่าย
    */
    'pricePerUnit': number;
    /**
    * ส่วนลด
    */
    'discountAmount'?: number;
    /**
    * ภาษี
    */
    'vatRate'?: number;
    /**
    * มูลค่ารวม
    */
    'total': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "systemCode",
            "baseName": "systemCode",
            "type": "number"
        },
        {
            "name": "categoryId",
            "baseName": "categoryId",
            "type": "number"
        },
        {
            "name": "nameForeign",
            "baseName": "nameForeign",
            "type": "string"
        },
        {
            "name": "nameLocal",
            "baseName": "nameLocal",
            "type": "string"
        },
        {
            "name": "creditCategory",
            "baseName": "creditCategory",
            "type": "number"
        },
        {
            "name": "creditId",
            "baseName": "creditId",
            "type": "number"
        },
        {
            "name": "creditCode",
            "baseName": "creditCode",
            "type": "string"
        },
        {
            "name": "creditNameForeign",
            "baseName": "creditNameForeign",
            "type": "string"
        },
        {
            "name": "creditNameLocal",
            "baseName": "creditNameLocal",
            "type": "string"
        },
        {
            "name": "debitCategory",
            "baseName": "debitCategory",
            "type": "number"
        },
        {
            "name": "debitId",
            "baseName": "debitId",
            "type": "number"
        },
        {
            "name": "debitCode",
            "baseName": "debitCode",
            "type": "string"
        },
        {
            "name": "debitNameForeign",
            "baseName": "debitNameForeign",
            "type": "string"
        },
        {
            "name": "debitNameLocal",
            "baseName": "debitNameLocal",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "unitName",
            "baseName": "unitName",
            "type": "string"
        },
        {
            "name": "pricePerUnit",
            "baseName": "pricePerUnit",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "vatRate",
            "baseName": "vatRate",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseInlineProductItem.attributeTypeMap;
    }
}

export class ExpenseSimpleProductItem {
    /**
    * รายละเอียด
    */
    'description'?: string;
    /**
    * system code
    */
    'systemCode'?: number;
    /**
    * id of expense category
    */
    'categoryId'?: number;
    /**
    * name foreign of expense category
    */
    'nameForeign'?: string;
    /**
    * name local of expense category
    */
    'nameLocal'?: string;
    /**
    * credit category
    */
    'creditCategory'?: number;
    /**
    * id of expense credit
    */
    'creditId'?: number;
    /**
    * code of expense credit category
    */
    'creditCode'?: string;
    /**
    * name foreign of expense credit category
    */
    'creditNameForeign'?: string;
    /**
    * name local of expense credit category
    */
    'creditNameLocal'?: string;
    /**
    * debit category
    */
    'debitCategory'?: number;
    /**
    * id of expense debit
    */
    'debitId'?: number;
    /**
    * code of expense debit category
    */
    'debitCode'?: string;
    /**
    * name foreign of expense debit category
    */
    'debitNameForeign'?: string;
    /**
    * name local of expense debit category
    */
    'debitNameLocal'?: string;
    /**
    * จำนวนรายการ
    */
    'quantity': number;
    /**
    * หน่วยรายการ
    */
    'unitName'?: string;
    /**
    * มูลค่าค่าใช้จ่าย
    */
    'pricePerUnit': number;
    /**
    * มูลค่ารวม
    */
    'total': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "systemCode",
            "baseName": "systemCode",
            "type": "number"
        },
        {
            "name": "categoryId",
            "baseName": "categoryId",
            "type": "number"
        },
        {
            "name": "nameForeign",
            "baseName": "nameForeign",
            "type": "string"
        },
        {
            "name": "nameLocal",
            "baseName": "nameLocal",
            "type": "string"
        },
        {
            "name": "creditCategory",
            "baseName": "creditCategory",
            "type": "number"
        },
        {
            "name": "creditId",
            "baseName": "creditId",
            "type": "number"
        },
        {
            "name": "creditCode",
            "baseName": "creditCode",
            "type": "string"
        },
        {
            "name": "creditNameForeign",
            "baseName": "creditNameForeign",
            "type": "string"
        },
        {
            "name": "creditNameLocal",
            "baseName": "creditNameLocal",
            "type": "string"
        },
        {
            "name": "debitCategory",
            "baseName": "debitCategory",
            "type": "number"
        },
        {
            "name": "debitId",
            "baseName": "debitId",
            "type": "number"
        },
        {
            "name": "debitCode",
            "baseName": "debitCode",
            "type": "string"
        },
        {
            "name": "debitNameForeign",
            "baseName": "debitNameForeign",
            "type": "string"
        },
        {
            "name": "debitNameLocal",
            "baseName": "debitNameLocal",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "unitName",
            "baseName": "unitName",
            "type": "string"
        },
        {
            "name": "pricePerUnit",
            "baseName": "pricePerUnit",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return ExpenseSimpleProductItem.attributeTypeMap;
    }
}

export class ExpensenlineDocumentResponse {
    /**
    * action success
    */
    'status'?: boolean;
    /**
    * error message
    */
    'message'?: string;
    /**
    * error code
    */
    'code'?: number;
    'data'?: ExpenseInlineDocumentWithId;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "boolean"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "ExpenseInlineDocumentWithId"
        }    ];

    static getAttributeTypeMap() {
        return ExpensenlineDocumentResponse.attributeTypeMap;
    }
}

export class InlineDocument {
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ผู้ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    */
    'isVatInclusive'?: boolean;
    /**
    * รูปแบบส่วนลดสินค้าแต่ละรายการ: 1 = รูปแบบเปอร์เซ็นต์ (%) / 3 = รูปแบบจำนวนเงิน (฿)
    */
    'discountType'?: number;
    'items'?: Array<InlineProductItem>;
    /**
    * รวมยอดขาย
    */
    'subTotal': number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลดรวม
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
    */
    'exemptAmount'?: number;
    /**
    * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
    */
    'vatableAmount'?: number;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "discountType",
            "baseName": "discountType",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<InlineProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "exemptAmount",
            "baseName": "exemptAmount",
            "type": "number"
        },
        {
            "name": "vatableAmount",
            "baseName": "vatableAmount",
            "type": "number"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InlineDocument.attributeTypeMap;
    }
}

export class InlineDocumentResponse {
    /**
    * action success
    */
    'status'?: boolean;
    /**
    * error message
    */
    'message'?: string;
    /**
    * error code
    */
    'code'?: number;
    'data'?: InlineDocumentWithId;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "boolean"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "InlineDocumentWithId"
        }    ];

    static getAttributeTypeMap() {
        return InlineDocumentResponse.attributeTypeMap;
    }
}

export class InlineDocumentWithId {
    /**
    * เลขที่เอกสาร
    */
    'documentSerial'?: string;
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ผู้ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    */
    'isVatInclusive'?: boolean;
    /**
    * รูปแบบส่วนลดสินค้าแต่ละรายการ: 1 = รูปแบบเปอร์เซ็นต์ (%) / 3 = รูปแบบจำนวนเงิน (฿)
    */
    'discountType'?: number;
    'items'?: Array<InlineProductItem>;
    /**
    * รวมยอดขาย
    */
    'subTotal': number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลดรวม
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
    */
    'exemptAmount'?: number;
    /**
    * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
    */
    'vatableAmount'?: number;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "documentSerial",
            "baseName": "documentSerial",
            "type": "string"
        },
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "discountType",
            "baseName": "discountType",
            "type": "number"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<InlineProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "exemptAmount",
            "baseName": "exemptAmount",
            "type": "number"
        },
        {
            "name": "vatableAmount",
            "baseName": "vatableAmount",
            "type": "number"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return InlineDocumentWithId.attributeTypeMap;
    }
}

export class InlineProductItem {
    /**
    * ชื่อสินค้า
    */
    'name': string;
    /**
    * รายละเอียดสินค้า
    */
    'description'?: string;
    /**
    * จำนวนสินค้า
    */
    'quantity': number;
    /**
    * หน่วยสินค้า
    */
    'unitName'?: string;
    /**
    * ราคาสินค้าต่อหน่วย
    */
    'pricePerUnit': number;
    /**
    * ส่วนลดสินค้า
    */
    'discountAmount'?: number;
    /**
    * ภาษี
    */
    'vatRate'?: number;
    /**
    * ราคารวมสินค้า
    */
    'total': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "unitName",
            "baseName": "unitName",
            "type": "string"
        },
        {
            "name": "pricePerUnit",
            "baseName": "pricePerUnit",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "vatRate",
            "baseName": "vatRate",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return InlineProductItem.attributeTypeMap;
    }
}

export class SimpleDocument {
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    */
    'isVatInclusive'?: boolean;
    /**
    * none=0, percent=1, value=3
    */
    'discountType'?: number;
    /**
    * Value of discount by percentage
    */
    'discountPercentage'?: number;
    /**
    * Value of discount by amount
    */
    'discountAmount'?: number;
    /**
    * Document creator or sale name
    */
    'salesName'?: string;
    'items'?: Array<SimpleProductItem>;
    /**
    * Total price of document
    */
    'subTotal'?: number;
    /**
    * มูลค่าหลังหักส่วนลด
    */
    'totalAfterDiscount': number;
    /**
    * มูลค่าท้ายเอกสาร (รวม vat เสมอ)
    */
    'grandTotal': number;
    /**
    * มูลค่าเอกสารก่อนภาษี
    */
    'totalWithoutVat'?: number;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;
    /**
    * None=0, Cash=1, Transfer=5,CreditCard=7
    */
    'paymentMethod'?: number;
    /**
    * วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd
    */
    'paymentDate'?: string;
    /**
    * รายละเอียดการเก็บเงิน
    */
    'paymentRemarks'?: string;
    /**
    * ชื่อธนาคาร
    */
    'bankAccountName'?: string;
    /**
    * เลขที่ธนาคาร/บัตรเคดิต(สำหรับ MethodPayment=5,7)
    */
    'bankAccountNumber'?: string;
    /**
    * จำนวนเงินที่เก็บ
    */
    'collected'?: number;
    /**
    * ยอดหัก ณ ที่จ่าย
    */
    'withheldAmount'?: number;
    /**
    * หัก ณ ที่จ่าย
    */
    'withheldPercentage'?: number;
    /**
    * ค่าธรรมเนียม
    */
    'fee'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "discountType",
            "baseName": "discountType",
            "type": "number"
        },
        {
            "name": "discountPercentage",
            "baseName": "discountPercentage",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<SimpleProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "totalWithoutVat",
            "baseName": "totalWithoutVat",
            "type": "number"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        },
        {
            "name": "paymentMethod",
            "baseName": "paymentMethod",
            "type": "number"
        },
        {
            "name": "paymentDate",
            "baseName": "paymentDate",
            "type": "string"
        },
        {
            "name": "paymentRemarks",
            "baseName": "paymentRemarks",
            "type": "string"
        },
        {
            "name": "bankAccountName",
            "baseName": "bankAccountName",
            "type": "string"
        },
        {
            "name": "bankAccountNumber",
            "baseName": "bankAccountNumber",
            "type": "string"
        },
        {
            "name": "collected",
            "baseName": "collected",
            "type": "number"
        },
        {
            "name": "withheldAmount",
            "baseName": "withheldAmount",
            "type": "number"
        },
        {
            "name": "withheldPercentage",
            "baseName": "withheldPercentage",
            "type": "number"
        },
        {
            "name": "fee",
            "baseName": "fee",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SimpleDocument.attributeTypeMap;
    }
}

export class SimpleDocumentResponse {
    /**
    * action success
    */
    'status'?: boolean;
    /**
    * error message
    */
    'message'?: string;
    /**
    * error code
    */
    'code'?: number;
    'data'?: SimpleDocument;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "status",
            "baseName": "status",
            "type": "boolean"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "number"
        },
        {
            "name": "data",
            "baseName": "data",
            "type": "SimpleDocument"
        }    ];

    static getAttributeTypeMap() {
        return SimpleDocumentResponse.attributeTypeMap;
    }
}

export class SimpleDocumentWithoutPayment {
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * ราคาสินค้ารวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVatInclusive'?: boolean;
    'items'?: Array<SimpleProductItem>;
    /**
    * ยอดขายรวม
    */
    'subTotal': number;
    /**
    * ส่วนลด (%)
    */
    'discountPercentage'?: number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลด
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายหลังหักส่วนลดรวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVat'?: boolean;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * ยอดขายหลังหักส่วนลดหักภาษี ณ ที่จ่ายหรือไม่่
    */
    'isWithholdingTax'?: boolean;
    /**
    * ภาษี ณ ที่จ่าย (%)
    */
    'withholdingTaxAmount'?: number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<SimpleProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountPercentage",
            "baseName": "discountPercentage",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "isVat",
            "baseName": "isVat",
            "type": "boolean"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "isWithholdingTax",
            "baseName": "isWithholdingTax",
            "type": "boolean"
        },
        {
            "name": "withholdingTaxAmount",
            "baseName": "withholdingTaxAmount",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SimpleDocumentWithoutPayment.attributeTypeMap;
    }
}

export class SimpleDocumentWithoutPaymentWithDocumentId {
    /**
    * เลขที่เอกสาร
    */
    'documentSerial'?: number;
    /**
    * รหัส ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactCode': string;
    /**
    * ชื่อบริษัท
    */
    'contactName': string;
    /**
    * ที่อยู่ ผู้ติดต่อ/ผู้จำหน่าย
    */
    'contactAddress'?: string;
    /**
    * เลขประจำตัวผู้เสียภาษี ผู้ติิดต่อ/ผู้จำหน่าย
    */
    'contactTaxId'?: string;
    /**
    * สำนักงาน/สาขา
    */
    'contactBranch'?: string;
    /**
    * ชื่อผู้ติดต่อ
    */
    'contactPerson'?: string;
    /**
    * อีเมลผู้ติดต่อ
    */
    'contactEmail'?: string;
    /**
    * เบอร์มือถือผู้ติดต่อ
    */
    'contactNumber'?: string;
    /**
    * รหัสไปรษณีย์ติดต่อ
    */
    'contactZipCode'?: string;
    /**
    * วันที่เอกสาร รูปแบบ yyyy-MM-dd
    */
    'publishedOn'?: string;
    /**
    * รูปแบบเครดิต: 1 = เครดิต (วัน) / 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    */
    'creditType'?: number;
    /**
    * จำนวนวันที่ให้เครดิต
    */
    'creditDays'?: number;
    /**
    * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd
    */
    'dueDate'?: string;
    /**
    * พนักงานขาย
    */
    'salesName'?: string;
    /**
    * ชื่อโปรเจค
    */
    'projectName'?: string;
    /**
    * เลขที่อ้างอิง
    */
    'reference'?: string;
    /**
    * ราคาสินค้ารวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVatInclusive'?: boolean;
    'items'?: Array<SimpleProductItem>;
    /**
    * ยอดขายรวม
    */
    'subTotal'?: number;
    /**
    * ส่วนลด (%)
    */
    'discountPercentage'?: number;
    /**
    * ส่วนลดรวม
    */
    'discountAmount'?: number;
    /**
    * ยอดขายหลังหักส่วนลด
    */
    'totalAfterDiscount': number;
    /**
    * ยอดขายหลังหักส่วนลดรวมภาษีมูลค่าเพิ่มหรือไม่
    */
    'isVat'?: boolean;
    /**
    * ภาษีมูลค่าเพิ่ม
    */
    'vatAmount'?: number;
    /**
    * รวมทั้งสิ้น
    */
    'grandTotal': number;
    /**
    * ยอดขายหลังหักส่วนลดหักภาษี ณ ที่จ่ายหรือไม่่
    */
    'isWithholdingTax'?: boolean;
    /**
    * ภาษี ณ ที่จ่าย (%)
    */
    'withholdingTaxAmount'?: number;
    /**
    * หมายเหตุ
    */
    'remarks'?: string;
    /**
    * โน๊ตภายในบริษัท
    */
    'internalNotes'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "documentSerial",
            "baseName": "documentSerial",
            "type": "number"
        },
        {
            "name": "contactCode",
            "baseName": "contactCode",
            "type": "string"
        },
        {
            "name": "contactName",
            "baseName": "contactName",
            "type": "string"
        },
        {
            "name": "contactAddress",
            "baseName": "contactAddress",
            "type": "string"
        },
        {
            "name": "contactTaxId",
            "baseName": "contactTaxId",
            "type": "string"
        },
        {
            "name": "contactBranch",
            "baseName": "contactBranch",
            "type": "string"
        },
        {
            "name": "contactPerson",
            "baseName": "contactPerson",
            "type": "string"
        },
        {
            "name": "contactEmail",
            "baseName": "contactEmail",
            "type": "string"
        },
        {
            "name": "contactNumber",
            "baseName": "contactNumber",
            "type": "string"
        },
        {
            "name": "contactZipCode",
            "baseName": "contactZipCode",
            "type": "string"
        },
        {
            "name": "publishedOn",
            "baseName": "publishedOn",
            "type": "string"
        },
        {
            "name": "creditType",
            "baseName": "creditType",
            "type": "number"
        },
        {
            "name": "creditDays",
            "baseName": "creditDays",
            "type": "number"
        },
        {
            "name": "dueDate",
            "baseName": "dueDate",
            "type": "string"
        },
        {
            "name": "salesName",
            "baseName": "salesName",
            "type": "string"
        },
        {
            "name": "projectName",
            "baseName": "projectName",
            "type": "string"
        },
        {
            "name": "reference",
            "baseName": "reference",
            "type": "string"
        },
        {
            "name": "isVatInclusive",
            "baseName": "isVatInclusive",
            "type": "boolean"
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "Array<SimpleProductItem>"
        },
        {
            "name": "subTotal",
            "baseName": "subTotal",
            "type": "number"
        },
        {
            "name": "discountPercentage",
            "baseName": "discountPercentage",
            "type": "number"
        },
        {
            "name": "discountAmount",
            "baseName": "discountAmount",
            "type": "number"
        },
        {
            "name": "totalAfterDiscount",
            "baseName": "totalAfterDiscount",
            "type": "number"
        },
        {
            "name": "isVat",
            "baseName": "isVat",
            "type": "boolean"
        },
        {
            "name": "vatAmount",
            "baseName": "vatAmount",
            "type": "number"
        },
        {
            "name": "grandTotal",
            "baseName": "grandTotal",
            "type": "number"
        },
        {
            "name": "isWithholdingTax",
            "baseName": "isWithholdingTax",
            "type": "boolean"
        },
        {
            "name": "withholdingTaxAmount",
            "baseName": "withholdingTaxAmount",
            "type": "number"
        },
        {
            "name": "remarks",
            "baseName": "remarks",
            "type": "string"
        },
        {
            "name": "internalNotes",
            "baseName": "internalNotes",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return SimpleDocumentWithoutPaymentWithDocumentId.attributeTypeMap;
    }
}

export class SimpleProductItem {
    /**
    * service=1, productWithoutStock=3, productWithStock=5
    */
    'type'?: number;
    /**
    * ชื่อสินค้า
    */
    'name': string;
    /**
    * รายละเอียดสินค้า
    */
    'description'?: string;
    /**
    * จำนวนสินค้า
    */
    'quantity': number;
    /**
    * หน่วยสินค้า
    */
    'unitName'?: string;
    /**
    * ราคาสินค้าต่อหน่วย
    */
    'pricePerUnit': number;
    /**
    * ราคารวมสินค้า
    */
    'total': number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "quantity",
            "baseName": "quantity",
            "type": "number"
        },
        {
            "name": "unitName",
            "baseName": "unitName",
            "type": "string"
        },
        {
            "name": "pricePerUnit",
            "baseName": "pricePerUnit",
            "type": "number"
        },
        {
            "name": "total",
            "baseName": "total",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return SimpleProductItem.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "AuthenResponse": AuthenResponse,
    "BusinessCategory": BusinessCategory,
    "Empty": Empty,
    "ExpenseDocumentWithoutPayment": ExpenseDocumentWithoutPayment,
    "ExpenseDocumentWithoutPaymentResponse": ExpenseDocumentWithoutPaymentResponse,
    "ExpenseDocumentWithoutPaymentWithId": ExpenseDocumentWithoutPaymentWithId,
    "ExpenseInlineDocument": ExpenseInlineDocument,
    "ExpenseInlineDocumentWithId": ExpenseInlineDocumentWithId,
    "ExpenseInlineProductItem": ExpenseInlineProductItem,
    "ExpenseSimpleProductItem": ExpenseSimpleProductItem,
    "ExpensenlineDocumentResponse": ExpensenlineDocumentResponse,
    "InlineDocument": InlineDocument,
    "InlineDocumentResponse": InlineDocumentResponse,
    "InlineDocumentWithId": InlineDocumentWithId,
    "InlineProductItem": InlineProductItem,
    "SimpleDocument": SimpleDocument,
    "SimpleDocumentResponse": SimpleDocumentResponse,
    "SimpleDocumentWithoutPayment": SimpleDocumentWithoutPayment,
    "SimpleDocumentWithoutPaymentWithDocumentId": SimpleDocumentWithoutPaymentWithDocumentId,
    "SimpleProductItem": SimpleProductItem,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum AuthenticationApiApiKeys {
}

export class AuthenticationApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: AuthenticationApiApiKeys, value: string) {
        (this.authentications as any)[AuthenticationApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Generate Access Token
     * @param contentType 
     * @param grantType 
     * @param clientId from Flowaccount
     * @param scope from Flowaccount
     * @param clientSecret from Flowaccount
     * @param {*} [options] Override http request options.
     */
    public tokenPost (contentType: string, grantType: string, clientId: string, scope: string, clientSecret: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: AuthenResponse;  }> {
        const localVarPath = this.basePath + '/token';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'contentType' is not null or undefined
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling tokenPost.');
        }

        // verify required parameter 'grantType' is not null or undefined
        if (grantType === null || grantType === undefined) {
            throw new Error('Required parameter grantType was null or undefined when calling tokenPost.');
        }

        // verify required parameter 'clientId' is not null or undefined
        if (clientId === null || clientId === undefined) {
            throw new Error('Required parameter clientId was null or undefined when calling tokenPost.');
        }

        // verify required parameter 'scope' is not null or undefined
        if (scope === null || scope === undefined) {
            throw new Error('Required parameter scope was null or undefined when calling tokenPost.');
        }

        // verify required parameter 'clientSecret' is not null or undefined
        if (clientSecret === null || clientSecret === undefined) {
            throw new Error('Required parameter clientSecret was null or undefined when calling tokenPost.');
        }

        if (grantType !== undefined) {
            localVarQueryParameters['grant_type'] = ObjectSerializer.serialize(grantType, "string");
        }

        if (clientId !== undefined) {
            localVarQueryParameters['client_id'] = ObjectSerializer.serialize(clientId, "string");
        }

        if (scope !== undefined) {
            localVarQueryParameters['scope'] = ObjectSerializer.serialize(scope, "string");
        }

        if (clientSecret !== undefined) {
            localVarQueryParameters['client_secret'] = ObjectSerializer.serialize(clientSecret, "string");
        }

        localVarHeaderParams['Content-Type'] = ObjectSerializer.serialize(contentType, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AuthenResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AuthenResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum CashInvoiceApiApiKeys {
}

export class CashInvoiceApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: CashInvoiceApiApiKeys, value: string) {
        (this.authentications as any)[CashInvoiceApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary List all documents
     * @param currentPage 
     * @param pageSize 
     * @param authorization 
     * @param sortBy 
     * @param filter 
     * @param {*} [options] Override http request options.
     */
    public cashInvoicesGet (currentPage: string, pageSize: string, authorization: string, sortBy?: string, filter?: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }> {
        const localVarPath = this.basePath + '/cash-invoices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'currentPage' is not null or undefined
        if (currentPage === null || currentPage === undefined) {
            throw new Error('Required parameter currentPage was null or undefined when calling cashInvoicesGet.');
        }

        // verify required parameter 'pageSize' is not null or undefined
        if (pageSize === null || pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling cashInvoicesGet.');
        }

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cashInvoicesGet.');
        }

        if (currentPage !== undefined) {
            localVarQueryParameters['currentPage'] = ObjectSerializer.serialize(currentPage, "string");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "string");
        }

        if (sortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, "string");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SimpleDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Delete document
     * @param authorization 
     * @param id 
     * @param {*} [options] Override http request options.
     */
    public cashInvoicesIdDelete (authorization: string, id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Empty;  }> {
        const localVarPath = this.basePath + '/cash-invoices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cashInvoicesIdDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cashInvoicesIdDelete.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Empty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Empty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Get document
     * @param authorization 
     * @param id 
     * @param {*} [options] Override http request options.
     */
    public cashInvoicesIdGet (authorization: string, id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }> {
        const localVarPath = this.basePath + '/cash-invoices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cashInvoicesIdGet.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cashInvoicesIdGet.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SimpleDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Update document
     * @param authorization 
     * @param id 
     * @param {*} [options] Override http request options.
     */
    public cashInvoicesIdPut (authorization: string, id: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }> {
        const localVarPath = this.basePath + '/cash-invoices/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cashInvoicesIdPut.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling cashInvoicesIdPut.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SimpleDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create Document
     * @param authorization 
     * @param aPICoreDocument 
     * @param {*} [options] Override http request options.
     */
    public cashInvoicesPost (authorization: string, aPICoreDocument: SimpleDocument, options: any = {}) : Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }> {
        const localVarPath = this.basePath + '/cash-invoices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling cashInvoicesPost.');
        }

        // verify required parameter 'aPICoreDocument' is not null or undefined
        if (aPICoreDocument === null || aPICoreDocument === undefined) {
            throw new Error('Required parameter aPICoreDocument was null or undefined when calling cashInvoicesPost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(aPICoreDocument, "SimpleDocument")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SimpleDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SimpleDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ExpenseApiApiKeys {
}

export class ExpenseApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ExpenseApiApiKeys, value: string) {
        (this.authentications as any)[ExpenseApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Accounting categorys
     * @param authorization 
     * @param {*} [options] Override http request options.
     */
    public expensesCategoriesAccountingGet (authorization: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: BusinessCategory;  }> {
        const localVarPath = this.basePath + '/expenses/categories/accounting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling expensesCategoriesAccountingGet.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BusinessCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "BusinessCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Business categorys
     * @param authorization 
     * @param {*} [options] Override http request options.
     */
    public expensesCategoriesBusinessGet (authorization: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: BusinessCategory;  }> {
        const localVarPath = this.basePath + '/expenses/categories/business';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling expensesCategoriesBusinessGet.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BusinessCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "BusinessCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create expense document with discount and tax inline.
     * @param authorization 
     * @param expenseInlineDocument 
     * @param {*} [options] Override http request options.
     */
    public expensesInlinePost (authorization: string, expenseInlineDocument: ExpenseInlineDocument, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExpensenlineDocumentResponse;  }> {
        const localVarPath = this.basePath + '/expenses/inline';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling expensesInlinePost.');
        }

        // verify required parameter 'expenseInlineDocument' is not null or undefined
        if (expenseInlineDocument === null || expenseInlineDocument === undefined) {
            throw new Error('Required parameter expenseInlineDocument was null or undefined when calling expensesInlinePost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(expenseInlineDocument, "ExpenseInlineDocument")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExpensenlineDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExpensenlineDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create expense document.
     * @param authorization 
     * @param expenseDocumentWithoutPayment 
     * @param {*} [options] Override http request options.
     */
    public expensesPost (authorization: string, expenseDocumentWithoutPayment: ExpenseDocumentWithoutPayment, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExpenseDocumentWithoutPaymentResponse;  }> {
        const localVarPath = this.basePath + '/expenses';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling expensesPost.');
        }

        // verify required parameter 'expenseDocumentWithoutPayment' is not null or undefined
        if (expenseDocumentWithoutPayment === null || expenseDocumentWithoutPayment === undefined) {
            throw new Error('Required parameter expenseDocumentWithoutPayment was null or undefined when calling expensesPost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(expenseDocumentWithoutPayment, "ExpenseDocumentWithoutPayment")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExpenseDocumentWithoutPaymentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExpenseDocumentWithoutPaymentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum ReportApiApiKeys {
}

export class ReportApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: ReportApiApiKeys, value: string) {
        (this.authentications as any)[ReportApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @param culture 
     * @param authorization 
     * @param {*} [options] Override http request options.
     */
    public reportCultureSalePost (culture: string, authorization: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Buffer;  }> {
        const localVarPath = this.basePath + '/report/{culture}/sale'
            .replace('{' + 'culture' + '}', encodeURIComponent(String(culture)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'culture' is not null or undefined
        if (culture === null || culture === undefined) {
            throw new Error('Required parameter culture was null or undefined when calling reportCultureSalePost.');
        }

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling reportCultureSalePost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            encoding: null,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Buffer;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Buffer");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
export enum TaxInvoiceApiApiKeys {
}

export class TaxInvoiceApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: TaxInvoiceApiApiKeys, value: string) {
        (this.authentications as any)[TaxInvoiceApiApiKeys[key]].apiKey = value;
    }
    /**
     * 
     * @summary Create tax invocie document with discount and tax inline.
     * @param authorization 
     * @param aPICoreDocumentInline 
     * @param {*} [options] Override http request options.
     */
    public taxInvoicesInlinePost (authorization: string, aPICoreDocumentInline: InlineDocument, options: any = {}) : Promise<{ response: http.ClientResponse; body: InlineDocumentResponse;  }> {
        const localVarPath = this.basePath + '/tax-invoices/inline';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling taxInvoicesInlinePost.');
        }

        // verify required parameter 'aPICoreDocumentInline' is not null or undefined
        if (aPICoreDocumentInline === null || aPICoreDocumentInline === undefined) {
            throw new Error('Required parameter aPICoreDocumentInline was null or undefined when calling taxInvoicesInlinePost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(aPICoreDocumentInline, "InlineDocument")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: InlineDocumentResponse;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "InlineDocumentResponse");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @summary Create tax invocie document.
     * @param authorization 
     * @param simpleDocumentWithoutPayment 
     * @param {*} [options] Override http request options.
     */
    public taxInvoicesPost (authorization: string, simpleDocumentWithoutPayment: SimpleDocumentWithoutPayment, options: any = {}) : Promise<{ response: http.ClientResponse; body: SimpleDocumentWithoutPaymentWithDocumentId;  }> {
        const localVarPath = this.basePath + '/tax-invoices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling taxInvoicesPost.');
        }

        // verify required parameter 'simpleDocumentWithoutPayment' is not null or undefined
        if (simpleDocumentWithoutPayment === null || simpleDocumentWithoutPayment === undefined) {
            throw new Error('Required parameter simpleDocumentWithoutPayment was null or undefined when calling taxInvoicesPost.');
        }

        localVarHeaderParams['Authorization'] = ObjectSerializer.serialize(authorization, "string");
        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(simpleDocumentWithoutPayment, "SimpleDocumentWithoutPayment")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SimpleDocumentWithoutPaymentWithDocumentId;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SimpleDocumentWithoutPaymentWithDocumentId");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
